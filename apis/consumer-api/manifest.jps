jpsVersion: 1.3
jpsType: install
application:
  id: shopozor-api
  name: Shopozor API
  version: 0.0
  baseUrl: https://raw.githubusercontent.com/softozor/shopozor-configuration/master

  globals:
    NODEJS_HOME: /home/jelastic
    NODEJS_CONTEXT: ROOT
    NODEJS_PATH_TO_CONTEXT: ${globals.NODEJS_HOME}/${globals.NODEJS_CONTEXT}
    NODEJS_PORT: 8080
    PATH_TO_IMAGEMAGICK: ${globals.NODEJS_HOME}/local
    localConfigFile: ${globals.NODEJS_PATH_TO_CONTEXT}/config/local.json
    localConfigTemplateFile: ${globals.NODEJS_PATH_TO_CONTEXT}/config/local-template.json

  settings:
    fields:
      - type: spacer
        caption: API
      - name: port
        caption: Listening port
        default: 8080
        type: numberpicker
        min: 0
        max: 9999
        editable: true
        required: true
      - name: redisPort
        caption: Redis port
        default: 6379
        type: numberpicker
        min: 0
        max: 9999
        editable: true
        required: true
      - type: spacer
        caption: Git repository
      - name: gitRepo
        caption: Url
        type: string
        default: https://bitbucket.org/softozor/shopozor-consumer-api
        required: true
        regex: "^https?:\\/\\/.+$"
        regexText: Incorrect URL. HTTPS link to Git repository is required.
      - name: gitBranch
        caption: Branch
        type: string
        default: master
        required: true
      - name: gitUser
        caption: User
        type: string
        required: true
      - name: gitPassword
        caption: Password
        type: string
        inputType: password
        required: true
      - type: spacer
        caption: Magento
      - name: magentoHost
        caption: HOST
        type: hostpicker
        editable: true
        default: softozor-magento.hidora.com
        required: true
      - name: consumerKey
        caption: CONSUMER_KEY
        type: string
        required: true
      - name: consumerSecret
        caption: CONSUMER_SECRET
        type: string
        required: true
      - name: accessToken
        caption: ACCESS_TOKEN
        type: string
        required: true
      - name: accessTokenSecret
        caption: ACCESS_TOKEN_SECRET
        type: string
        required: true

  env:
    topology:
      nodes:
        - nodeGroup: bl
          nodeType: nginx-dockerized
          displayName: Node balancing
          count: 1
          fixedCloudlets: 1
          cloudlets: 4
          env:
            DOCKER_EXPOSED_PORT: 22,80,443,${globals.NODEJS_PORT}
        - nodeGroup: cp
          nodeType: nodejs
          displayName: Application servers
          count: 2
          fixedCloudlets: 4
          cloudlets: 10
          env:
            PACKAGE_MANAGER: yarn
            PATH: /usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin:${globals.PATH_TO_IMAGEMAGICK}/bin
            PORT: ${globals.NODEJS_PORT}
        - nodeGroup: nosqldb
          nodeType: redis
          displayName: Redis database
          fixedCloudlets: 1
          cloudlets: 4
        - nodeGroup: docker
          nodeType: docker
          fixedCloudlets: 1
          cloudlets: 16
          image: elasticsearch:5.6.12 #6.4.2 doesn't seem to work
          env:
            ES_JAVA_OPTS: -Xmx512m -Xms512m

  onInstall:
    - deployRepo
    - adaptConfigs
    - installImageMagick
    - setupNginx
    - startApp

  actions:
    deployRepo:
      api:
        - method: environment.vcs.CreateProject
          params:
            type: git
            context: ${globals.NODEJS_CONTEXT}
            url: ${settings.gitRepo}
            branch: ${settings.gitBranch}
            login: ${settings.gitUser}
            password: ${settings.gitPassword}
        - method: environment.vcs.Update
          params:
            context: ${globals.NODEJS_CONTEXT}
      nodeGroup: cp
    adaptConfigs:
      - cmd [cp]:
          - cp ${globals.localConfigTemplateFile} ${globals.localConfigFile}
      - setNodeIPInLocalConfigs
      - replacePlaceholdersInLocalConfig
    setNodeIPInLocalConfigs:
      forEach(nodes.cp):
        replaceInFile:
          path: ${globals.localConfigFile}
          replacements:
            - pattern: NODEJS_HOST
              replacement: ${@i.intIP}
          nodeId: ${@i.id}
    installImageMagick:
      cmd:
        - curl -fsSL ${baseUrl}/apis/consumer-api/scripts/InstallImageMagick.sh | /bin/bash -s ${globals.PATH_TO_IMAGEMAGICK}
      nodeGroup: cp
    replacePlaceholdersInLocalConfig:
      replaceInFile:
        path: ${globals.localConfigFile}
        replacements:
          - pattern: MAGENTO_HOST
            replacement: ${settings.magentoHost}
          - pattern: REDIS_HOST
            replacement: ${nodes.nosqldb.intIP}
          - pattern: ELASTICSEARCH_HOST
            replacement: ${nodes.docker.intIP}
          - pattern: CONSUMER_KEY
            replacement: ${settings.consumerKey}
          - pattern: CONSUMER_SECRET
            replacement: ${settings.consumerSecret}
          - pattern: ACCESS_TOKEN_SECRET
            replacement: ${settings.accessTokenSecret}
          - pattern: ACCESS_TOKEN
            replacement: ${settings.accessToken}
      nodeType: nodejs
    setupNginx:
      - protectEnvironmentFromOutside
      - defineRedisUpstreamServersInNginxConfig
      - exposeRedis
      - restartNodes:
        - nodeGroup: nginx-dockerized
    protectEnvironmentFromOutside:
      - replaceNginxDefaultPortWithNonDefault
      - script: ${baseUrl}/apis/scripts/DenyAllConnectionsToNginxDefaultPort.js
    replaceNginxDefaultPortWithNonDefault:
      replaceInFile:
        path: /etc/nginx/nginx-jelastic.conf
        replacements:
          - pattern: 80\$
            replacement: ${settings.port}\$
          - pattern: \*\:80\;
            replacement: \*\:${settings.port}\;
          - pattern: \[\:\:\]\:80\;
            replacement: "[::]:${settings.port};"
      nodeType: nginx-dockerized
    defineRedisUpstreamServersInNginxConfig:
      - replaceInFile:
          path: /etc/nginx/nginx-jelastic.conf
          replacements:
            # the port here below (6379) is redis official port
            # it is defined by the way it was installed
            - pattern: \#\#\# UPSTREAMS LIST FOLLOWS HERE \#\#\#
              replacement: "upstream redis_upstream { 
                server ${nodes.nosqldb.intIP}:6379;
              }"
          nodeType: nginx-dockerized    
    exposeRedis:
      - upload: 
          - nodeType: nginx-dockerized
            sourcePath: ${baseUrl}/apis/consumer-api/config/redis-server.conf
            destPath: /etc/nginx/conf.d/redis-server.conf
      - replaceInFile:
          path: /etc/nginx/conf.d/redis-server.conf
          # the port I am setting here is an arbitrary port we chose ourselves
          replacements:
            - pattern: REDIS_PORT
              replacement: ${settings.redisPort}
        nodeType: nginx-dockerized
    startApp:
      cmd:
        - curl -fsSL ${baseUrl}/scripts/StartApp.sh | /bin/bash -s ${globals.NODEJS_PATH_TO_CONTEXT}
      nodeGroup: cp
