jpsVersion: 1.3
jpsType: install
application:
  id: shopozor-saleor-api
  name: Shopozor API
  version: 0.0
  baseUrl: https://raw.githubusercontent.com/softozor/shopozor-configuration/master

  globals:
    HOME: /var/www/webroot
    CONTEXT: ROOT
    PATH_TO_CONTEXT: ${globals.HOME}/${globals.CONTEXT}
    SECRET_KEY: ${fn.uuid}
    DB_USER_PASSWORD: ${fn.password}
    DB_USERNAME: saleor
    DB_NAME: saleor

  settings:
    fields:
      - type: spacer
        caption: API
      - name: port
        caption: Listening port
        default: 8000
        type: numberpicker
        min: 0
        max: 9999
        editable: true
        required: true
      - type: spacer
        caption: Git repository
      - name: gitRepo
        caption: Url
        type: string
        default: https://github.com/softozor/saleor
        required: true
        regex: "^https?:\\/\\/.+$"
        regexText: Incorrect URL. HTTPS link to Git repository is required.
      - name: gitBranch
        caption: Branch
        type: string
        default: master
        required: true
      - name: gitUser
        caption: User
        type: string
        required: true
      - name: gitPassword
        caption: Password
        type: string
        inputType: password
        required: true

  env:
    topology:
      nodes:
        - nodeGroup: bl
          nodeType: nginx-dockerized
          displayName: Node balancing
          count: 1
          fixedCloudlets: 1
          cloudlets: 4
          env:
            DOCKER_EXPOSED_PORT: 22,80,443,${settings.port}
        - nodeGroup: cp
          nodeType: apache2-python
          displayName: Application servers
          count: 1
          fixedCloudlets: 4
          cloudlets: 10
          env:
            SECRET_KEY: ${globals.SECRET_KEY}
        - nodeGroup: sqldb
          nodeType: postgresql
          tag: 10.5
          displayName: PostgreSQL
          fixedCloudlets: 1
          cloudlets: 4
        - nodeGroup: nosqldb
          nodeType: redis
          displayName: Redis cache
          fixedCloudlets: 1
          cloudlets: 4

  onInstall:
    - setServersPortInNginxConf
    - prepareDatabase
    - deployRepo
    - installApp
    - restorePermissions
    - openFirewall
    - startApp
  actions:
    # TODO: with wsgi, this will probably not be necessary
    setServersPortInNginxConf:
      - forEach(cp:nodes.cp):
        replaceInFile:
          nodeType: nginx-dockerized
          path: /etc/nginx/nginx-jelastic.conf
          replacements:
            - pattern: ${@cp.intIP}
              replacement: ${@cp.intIP}\:${settings.port}
      - restartService:
          - nodeGroup: bl
    prepareDatabase:
      - setDatabaseUrlEnvVar
      - backupPermissionsFile
      - askDatabaseToTrustMe
      - createDatabase
    setDatabaseUrlEnvVar:
      - api:
          - method: jelastic.environment.control.AddContainerEnvVars
            params:
              nodeGroup: cp
              vars:
                DATABASE_URL: postgres://${globals.DB_USERNAME}:${globals.DB_USER_PASSWORD}@${nodes.sqldb.intIP}:5432/${globals.DB_NAME}
                CACHE_URL: redis://${nodes.nosqldb.intIP}:6379/0
      - forEach(bl:nodes.bl):
          api:
            - method: jelastic.environment.control.AddContainerEnvVars
              params:
                nodeGroup: cp
                vars:
                  # TODO: the hidora envName should not appear in production (not even the domain name)
                  ALLOWED_HOSTS: ${@bl.intIP},${env.envName}.hidora.com
                  # at least, we will need to add the ip addresses of both frontends
    backupPermissionsFile:
      - api:
          - method: jelastic.environment.file.Copy
            params:
              src: /var/lib/pgsql/data/pg_hba.conf
              dest: /var/lib/pgsql/data/pg_hba.conf.orig
              nodeGroup: sqldb
      - deleteFileFromDatabaseServer:
          pathToFile: /var/lib/pgsql/data/pg_hba.conf
    askDatabaseToTrustMe:
      - upload:
          - sourcePath: ${baseUrl}/apis/saleor-api/config/pg_hba.conf
            destPath: /var/lib/pgsql/data/pg_hba.conf
            nodeGroup: sqldb
      - restartDatabaseService
    createDatabase:
      cmd [sqldb]:
        - createuser --superuser saleor
        - echo "alter user ${globals.DB_USERNAME} with encrypted password '${globals.DB_USER_PASSWORD}';" | psql
        - createdb --owner=saleor --template=template0 --encoding=utf-8 saleor
    restorePermissions:
      - removeSuperUserPermission
      - restorePermissionsFile
      - cleanupBackupFiles
      - restartDatabaseService
    removeSuperUserPermission:
      cmd [sqldb]:
        - echo "alter user ${globals.DB_USERNAME} with NOSUPERUSER;" | psql
    restorePermissionsFile:
      - deleteFileFromDatabaseServer:
          pathToFile: /var/lib/pgsql/data/pg_hba.conf
      - api:
          - method: jelastic.environment.file.Copy
            params:
              src: /var/lib/pgsql/data/pg_hba.conf.orig
              dest: /var/lib/pgsql/data/pg_hba.conf
              nodeGroup: sqldb
    cleanupBackupFiles:
      deleteFileFromDatabaseServer:
        pathToFile: /var/lib/pgsql/data/pg_hba.conf.orig
    deleteFileFromDatabaseServer:
      api:
        - method: jelastic.environment.file.Delete
          params:
            path: ${this.pathToFile}
            nodeGroup: sqldb
    restartDatabaseService:
      restartService:
        - nodeGroup: sqldb
    deployRepo:
      api:
        - method: environment.vcs.CreateProject
          params:
            type: git
            context: ${globals.CONTEXT}
            url: ${settings.gitRepo}
            branch: ${settings.gitBranch}
            login: ${settings.gitUser}
            password: ${settings.gitPassword}
        - method: environment.vcs.Update
          params:
            context: ${globals.CONTEXT}
      nodeGroup: cp
    installApp:
      cmd [cp]:
        - cd ${globals.PATH_TO_CONTEXT}
        - pip install -r requirements.txt
        - python ./manage.py migrate
    openFirewall:
      api:
        - method: environment.security.AddRule
          params:
            nodeGroup: cp
            rule:
              protocol: ALL
              isEnabled: true
              name: Allow connection to Saleor API
              action: ALLOW
              ports: ${settings.port}
              type: CUSTOM
              direction: INPUT
    # TODO: this issues a timeout:
    startApp:
      cmd [cp]:
        - cd ${globals.PATH_TO_CONTEXT}
        - python ./manage.py runserver 0.0.0.0:${settings.port}
