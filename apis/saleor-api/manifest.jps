jpsVersion: 1.3
jpsType: install
application:
  id: shopozor-saleor-api
  name: Saleor API
  version: 0.0
  baseUrl: https://raw.githubusercontent.com/softozor/shopozor-configuration/master

  globals:
    HOME: /var/www/webroot
    CONTEXT: ROOT
    PATH_TO_CONTEXT: ${globals.HOME}/${globals.CONTEXT}
    SECRET_KEY: ${fn.uuid}
    DB_USER_PASSWORD: ${fn.password(10)}
    DB_USERNAME: saleor
    DB_NAME: saleor
    PYTHON_VIRTUAL_ENV: env
    PATH_TO_VIRTUAL_ENV: ${globals.HOME}/${globals.PYTHON_VIRTUAL_ENV}
    PG_PASSWORD: ${fn.password(10)}

  settings:
    fields:
      - type: spacer
        caption: API
      # for some reason, I was not able to set the port
      # - name: port
      #   caption: Listening port
      #   default: 8000
      #   type: numberpicker
      #   min: 0
      #   max: 9999
      #   editable: true
      #   required: true
      - type: spacer
        caption: Git repository
      - name: gitRepo
        caption: Url
        type: string
        default: https://github.com/softozor/saleor
        required: true
        regex: "^https?:\\/\\/.+$"
        regexText: Incorrect URL. HTTPS link to Git repository is required.
      - name: gitBranch
        caption: Branch
        type: string
        default: master
        required: true
      - name: gitUser
        caption: User
        type: string
        required: true
      - name: gitPassword
        caption: Password
        type: string
        inputType: password
        required: true

  env:
    topology:
      nodes:
        - nodeGroup: bl
          nodeType: nginx-dockerized
          displayName: Node balancing
          count: 1
          fixedCloudlets: 1
          cloudlets: 4
          env:
            DOCKER_EXPOSED_PORT: 22,80,443
            SECRET_KEY: ${globals.SECRET_KEY}
        - nodeGroup: cp
          nodeType: apache2-python
          displayName: Application servers
          count: 1
          fixedCloudlets: 4
          cloudlets: 10
          env:
            # This is required for the migration step
            SECRET_KEY: ${globals.SECRET_KEY}
            PATH_TO_VIRTUAL_ENV: ${globals.PATH_TO_VIRTUAL_ENV}
            DOMAIN_NAMES: ${env.envName}.hidora.com
        - nodeGroup: sqldb
          nodeType: postgresql
          tag: 10.5
          displayName: PostgreSQL
          fixedCloudlets: 1
          cloudlets: 4
        - nodeGroup: nosqldb
          nodeType: redis
          displayName: Redis cache
          fixedCloudlets: 1
          cloudlets: 4

  onInstall:
    - prepareDatabase
    - deployRepo
    - createVirtualEnv
    - migrateDB
    - restorePermissions
    - setupWsgi
  actions:
    setupServerListeningConf:
      - replaceInFile:
        nodeType: apache2-python
        path: /etc/httpd/conf/httpd.conf
        replacements:
          - pattern: Listen \[\:\:\]\:80
            replacement: Listen 80
    prepareDatabase:
      - setDatabaseUrlEnvVar
      - createDatabase
    setDatabaseUrlEnvVar:
      - api:
          - method: jelastic.environment.control.AddContainerEnvVars
            params:
              nodeGroup: cp
              vars:
                DATABASE_URL: postgres://${globals.DB_USERNAME}:${globals.DB_USER_PASSWORD}@${nodes.sqldb.intIP}:5432/${globals.DB_NAME}
                CACHE_URL: redis://${nodes.nosqldb.intIP}:6379/0
    createDatabase:
      cmd[sqldb]:
        - jem passwd set -p ${globals.PG_PASSWORD}
        - export PGPASSWORD='${globals.PG_PASSWORD}'
        - psql -U webadmin -d postgres -c "CREATE ROLE ${globals.DB_USERNAME} PASSWORD '${globals.DB_USER_PASSWORD}' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;"
        - psql -U webadmin -d postgres -c "CREATE DATABASE ${globals.DB_NAME} OWNER ${globals.DB_USERNAME} ENCODING 'utf-8' TEMPLATE template0;"
      user: root
    restorePermissions:
      - cmd [sqldb]:
          - export PGPASSWORD='${globals.PG_PASSWORD}'
          - psql -U webadmin -d postgres -c "ALTER USER ${globals.DB_USERNAME} WITH NOSUPERUSER;"
        user: root
    deployRepo:
      api:
        - method: environment.vcs.CreateProject
          params:
            type: git
            context: ${globals.CONTEXT}
            url: ${settings.gitRepo}
            branch: ${settings.gitBranch}
            login: ${settings.gitUser}
            password: ${settings.gitPassword}
        - method: environment.vcs.Update
          params:
            context: ${globals.CONTEXT}
      nodeGroup: cp
    createVirtualEnv:
      - cmd[cp]:
          - cd ~
          - virtualenv ${globals.PYTHON_VIRTUAL_ENV}
          - source ${globals.PATH_TO_VIRTUAL_ENV}/bin/activate
          - cd ${globals.PATH_TO_CONTEXT}
          - pip install -r requirements.txt
    migrateDB:
      cmd [cp]:
        - cd ${globals.PATH_TO_CONTEXT}
        - source ${globals.PATH_TO_VIRTUAL_ENV}/bin/activate
        - python ./manage.py migrate
    setupWsgi:
      - upload:
          - sourcePath: ${baseUrl}/apis/saleor-api/config/wsgi.py
            destPath: ${globals.PATH_TO_CONTEXT}/wsgi.py
        nodeGroup: cp
      - forEach(nodes.cp):
          script: ${baseUrl}/apis/saleor-api/scripts/ReplaceWsgiPlaceholders.js
          pathToFile: ${globals.PATH_TO_CONTEXT}/wsgi.py
          domainNames: ${env.envName}.hidora.com
          nodeId: ${@i.id}
      - restartService:
          nodeGroup: cp
